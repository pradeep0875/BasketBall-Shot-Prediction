# -*- coding: utf-8 -*-
"""NBA Shot Prediction RANDOM FOREST N XGBOOST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QMKWtdnoh8NFQl10lWBzDuCTph5wiTLY
"""

# Commented out IPython magic to ensure Python compatibility.
from xgboost import XGBClassifier
from xgboost import plot_importance
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.metrics import roc_curve, auc
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import VotingClassifier
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

nba = pd.read_csv("/content/drive/MyDrive/Projects/shot_logs.csv")
df = nba.copy()
df.head()

df.shape

df.isnull().sum()

df[df.SHOT_CLOCK.isnull()==True].head()

df.SHOT_CLOCK = df.SHOT_CLOCK.fillna(df.SHOT_CLOCK.mean())

df.isnull().sum()

df.describe()

len(df.TOUCH_TIME[df.TOUCH_TIME<0])

df.TOUCH_TIME[df.TOUCH_TIME<0] = df.TOUCH_TIME.mean()

len(df.TOUCH_TIME[df.TOUCH_TIME>24.0])

df.TOUCH_TIME[df.TOUCH_TIME>24.0] = 24

df.describe()

df.info()

df.LOCATION = df.LOCATION.map({"H":1,"A":0})
df.W = df.W.map({"W":1,"L":0})
df.PTS_TYPE = df.PTS_TYPE.map({2:0,3:1})
df.SHOT_RESULT = df.SHOT_RESULT.map({"made":1,"missed":0})

df = df.rename(columns={"LOCATION":"HOME_AWAY","PTS_TYPE":"3PTS_SHOT","player_name":"PLAYER_NAME","player_id":"PLAYER_ID"})

df.nunique()

df.head()

df.GAME_CLOCK = df.GAME_CLOCK.apply(lambda x: int(x.split(":")[0])*60 + int(x.split(":")[1]))

df.head()

df = df.drop(columns=["GAME_ID",
                          "MATCHUP",
                          "W",
                          "PLAYER_NAME",
                          "SHOT_NUMBER",
                          "CLOSEST_DEFENDER",
                          "CLOSEST_DEFENDER_PLAYER_ID",
                          "FGM",
                          "PTS",
                          "PLAYER_ID"], axis=1)

df.head()

df.describe()

X1 = df[["HOME_AWAY",	"FINAL_MARGIN",	"PERIOD",	"GAME_CLOCK",	"SHOT_CLOCK",	"DRIBBLES",	"TOUCH_TIME",	"SHOT_DIST", "3PTS_SHOT",	"CLOSE_DEF_DIST"]]
Y1 = df['SHOT_RESULT']

X1_Train, X1_Test, Y1_Train, Y1_Test = train_test_split(X1, Y1, test_size=0.2)

#XGBoost

# Commented out IPython magic to ensure Python compatibility.
# %%time
# xgbst1 = XGBClassifier(n_estimators=50, max_depth=3, learning_rate=0.1, objective='binary:logistic')
# 
# xgbst1.fit(X1_Train, Y1_Train)
# 
# Y1_Pred = xgbst1.predict(X1_Test)

Accuracy = accuracy_score(Y1_Test, Y1_Pred)
Confusion_Matrix = confusion_matrix(Y1_Test, Y1_Pred)
Classification_Report = classification_report(Y1_Test, Y1_Pred)

print(f'Accuracy: {Accuracy}')
print('Confusion Matrix:')
print(Confusion_Matrix)
print('Classification Report:')
print(Classification_Report)

# plot feature importance
plot_importance(xgbst1)
plt.show()

X2 = df[["FINAL_MARGIN",	"SHOT_CLOCK",	"TOUCH_TIME",	"SHOT_DIST",	"CLOSE_DEF_DIST"]]
Y2 = df['SHOT_RESULT']

X2_Train, X2_Test, Y2_Train, Y2_Test = train_test_split(X2, Y2, test_size=0.2)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# xgbst2 = XGBClassifier(n_estimators=50, max_depth=3, learning_rate=0.1, objective='binary:logistic')
# 
# xgbst2.fit(X2_Train, Y2_Train)
# 
# Y2_Pred = xgbst2.predict(X2_Test)

Accuracy = accuracy_score(Y2_Test, Y2_Pred)
Confusion_Matrix = confusion_matrix(Y2_Test, Y2_Pred)
Classification_Report = classification_report(Y2_Test, Y2_Pred)

print(f'Accuracy: {Accuracy}')
print('Confusion Matrix:')
print(Confusion_Matrix)
print('Classification Report:')
print(Classification_Report)

#XGBOOST_HP

Param_Grid = {
    'n_estimators': [50, 100, 150, 200],
    'learning_rate': [0.01, 0.1, 0.2, 0.001],
    'max_depth': [2, 3]
}

Grid_Search = GridSearchCV(estimator=xgbst2, param_grid=Param_Grid, cv=5, scoring='accuracy')

Grid_Search.fit(X2_Train, Y2_Train)

print("Best Hyperparameters:", Grid_Search.best_params_)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# xgbst_hp = XGBClassifier(n_estimators=150, max_depth=3, learning_rate=0.1, objective='binary:logistic')
# 
# xgbst_hp.fit(X2_Train, Y2_Train)
# 
# Y_hp_Pred = xgbst_hp.predict(X2_Test)

Accuracy = accuracy_score(Y2_Test, Y_hp_Pred)
Confusion_Matrix = confusion_matrix(Y2_Test, Y_hp_Pred)
Classification_Report = classification_report(Y2_Test, Y_hp_Pred)

print(f'Accuracy: {Accuracy}')
print('Confusion Matrix:')
print(Confusion_Matrix)
print('Classification Report:')
print(Classification_Report)

#RandomForest

# Commented out IPython magic to ensure Python compatibility.
# %%time
# RF_Model1 = RandomForestClassifier(n_estimators=50, max_depth=3)
# RF_Model1.fit(X1_Train, Y1_Train)
# Y3_Pred = RF_Model1.predict(X1_Test)

Accuracy = accuracy_score(Y2_Test, Y3_Pred)
Confusion_Matrix = confusion_matrix(Y2_Test, Y3_Pred)
Classification_Report = classification_report(Y2_Test, Y3_Pred)

print(f'Accuracy: {Accuracy}')
print('Confusion Matrix:')
print(Confusion_Matrix)
print('Classification Report:')
print(Classification_Report)

importances = RF_Model1.feature_importances_

# Sort feature importances in descending order
indices = np.argsort(importances)[::-1]

# Plot feature importances
plt.bar(range(X1_Train.shape[1]), importances[indices])
plt.xticks(range(X1_Train.shape[1]), indices)
plt.xlabel('Feature Index')
plt.ylabel('Feature Importance')
plt.show()

X3 = df[["3PTS_SHOT",	"SHOT_CLOCK",	"TOUCH_TIME",	"SHOT_DIST",	"CLOSE_DEF_DIST"]]
Y3= df['SHOT_RESULT']

X3_Train, X3_Test, Y3_Train, Y3_Test = train_test_split(X3, Y3, test_size=0.2)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# RF_Model2 = RandomForestClassifier(n_estimators=50, max_depth=3)
# RF_Model2.fit(X3_Train, Y3_Train)
# Y31_Pred = RF_Model2.predict(X3_Test)
#

Accuracy = accuracy_score(Y3_Test, Y31_Pred)
Confusion_Matrix = confusion_matrix(Y3_Test, Y31_Pred)
Classification_Report = classification_report(Y3_Test, Y31_Pred)

print(f'Accuracy: {Accuracy}')
print('Confusion Matrix:')
print(Confusion_Matrix)
print('Classification Report:')
print(Classification_Report)