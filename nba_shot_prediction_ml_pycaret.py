# -*- coding: utf-8 -*-
"""NBA SHOT PREDICTION ML PYCARET.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GGSPjUgoWMve9knbDRmV3nzRGdXh5oJ1
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.regularizers import l2

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

nba = pd.read_csv("/content/drive/MyDrive/Projects/shot_logs.csv")
df = nba.copy()
df.head()

df.info()

df.SHOT_CLOCK = df.SHOT_CLOCK.fillna(df.SHOT_CLOCK.mean())

len(df.TOUCH_TIME[df.TOUCH_TIME<0])

df.TOUCH_TIME[df.TOUCH_TIME<0] = df.TOUCH_TIME.mean()

len(df.TOUCH_TIME[df.TOUCH_TIME<0])

len(df.TOUCH_TIME[df.TOUCH_TIME>24.0])

df.TOUCH_TIME[df.TOUCH_TIME>24.0] = 24

df.LOCATION = df.LOCATION.map({"H":1,"A":0})
df.W = df.W.map({"W":1,"L":0})
df.PTS_TYPE = df.PTS_TYPE.map({2:0,3:1})
df.SHOT_RESULT = df.SHOT_RESULT.map({"made":1,"missed":0})

df = df.rename(columns={"LOCATION":"HOME_AWAY","PTS_TYPE":"3PTS_SHOT","player_name":"PLAYER_NAME","player_id":"PLAYER_ID"})

df.GAME_CLOCK = df.GAME_CLOCK.apply(lambda x: int(x.split(":")[0])*60 + int(x.split(":")[1]))

df = df.drop(columns=["GAME_ID",
                          "MATCHUP",
                          "W",
                          "PLAYER_NAME",
                          "SHOT_NUMBER",
                          "CLOSEST_DEFENDER",
                          "CLOSEST_DEFENDER_PLAYER_ID",
                          "FGM",
                          "PTS",
                          "PLAYER_ID"], axis=1)

# check installed version
import pycaret
pycaret.__version__

from pycaret.classification import *
s = setup(df, target = 'SHOT_RESULT', session_id = 123)

# compare baseline models
best = compare_models()

# plot confusion matrix
plot_model(best, plot = 'confusion_matrix')

# plot feature importance
plot_model(best, plot = 'feature')

models()

get_metrics()

# plot class report
plot_model(best, plot = 'class_report')

from sklearn.ensemble import GradientBoostingClassifier

X1 = df[["HOME_AWAY",	"FINAL_MARGIN",	"PERIOD",	"GAME_CLOCK",	"SHOT_CLOCK",	"DRIBBLES",	"TOUCH_TIME",	"SHOT_DIST", "3PTS_SHOT",	"CLOSE_DEF_DIST"]]
Y1 = df['SHOT_RESULT']

X1_Train, X1_Test, Y1_Train, Y1_Test = train_test_split(X1, Y1, test_size=0.2)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# gb_clf = GradientBoostingClassifier()
# gb_clf.fit(X1_Train, Y1_Train)

# Make predictions
Y1_Pred = gb_clf.predict(X1_Test)

# Evaluate model
print("Accuracy:", accuracy_score(Y1_Test, Y1_Pred))
print("Classification Report:\n", classification_report(Y1_Test, Y1_Pred))